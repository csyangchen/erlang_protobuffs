
-module(pokemon_pb_data).

-export([forms/0]).

forms() ->

[{attribute,1,file,{"src/pokemon_pb.erl",1}},
 {attribute,25,module,pokemon_pb},
 {attribute,26,export,
  [{encode_pikachu,1},{decode_pikachu,1},{delimited_decode_pikachu,1}]},
 {attribute,27,export,
  [{has_extension,2},{extension_size,1},{get_extension,2},{set_extension,3}]},
 {attribute,29,export,[{decode_extensions,1}]},
 {attribute,30,export,[{encode,1},{decode,2},{delimited_decode,2}]},
 {attribute,31,export,[{int_to_enum,2},{enum_to_int,2}]},
 {attribute,32,record,
  {pikachu,
   [{record_field,32,{atom,32,abc}},
    {record_field,32,{atom,32,def}},
    {record_field,32,
     {atom,32,'$extensions'},
     {call,32,{remote,32,{atom,32,dict},{atom,32,new}},[]}}]}},
 {function,35,encode,1,
  [{clause,35,[{nil,35}],[],[{nil,36}]},
   {clause,37,
    [{var,37,'Records'}],
    [[{call,37,{atom,37,is_list},[{var,37,'Records'}]}]],
    [{call,38,{atom,38,delimited_encode},[{var,38,'Records'}]}]},
   {clause,39,
    [{var,39,'Record'}],
    [],
    [{call,40,
      {atom,40,encode},
      [{call,40,{atom,40,element},[{integer,40,1},{var,40,'Record'}]},
       {var,40,'Record'}]}]}]},
 {function,42,encode_pikachu,1,
  [{clause,42,
    [{var,42,'Records'}],
    [[{call,42,{atom,42,is_list},[{var,42,'Records'}]}]],
    [{call,43,{atom,43,delimited_encode},[{var,43,'Records'}]}]},
   {clause,44,
    [{var,44,'Record'}],
    [[{call,44,{atom,44,is_record},[{var,44,'Record'},{atom,44,pikachu}]}]],
    [{call,45,{atom,45,encode},[{atom,45,pikachu},{var,45,'Record'}]}]}]},
 {function,47,encode,2,
  [{clause,47,
    [{atom,47,pikachu},{var,47,'Records'}],
    [[{call,47,{atom,47,is_list},[{var,47,'Records'}]}]],
    [{call,48,{atom,48,delimited_encode},[{var,48,'Records'}]}]},
   {clause,49,
    [{atom,49,pikachu},{var,49,'Record'}],
    [],
    [{cons,50,
      {call,50,{atom,50,iolist},[{atom,50,pikachu},{var,50,'Record'}]},
      {call,50,{atom,50,encode_extensions},[{var,50,'Record'}]}}]}]},
 {function,52,encode_extensions,1,
  [{clause,52,
    [{record,52,pikachu,
      [{record_field,52,{atom,52,'$extensions'},{var,52,'Extends'}}]}],
    [],
    [{lc,53,
      {call,53,
       {atom,53,pack},
       [{var,53,'Key'},
        {var,53,'Optionalness'},
        {var,53,'Data'},
        {var,53,'Type'},
        {var,53,'Accer'}]},
      [{generate,54,
        {tuple,54,
         [{var,54,'Key'},
          {tuple,54,
           [{var,54,'Optionalness'},
            {var,54,'Data'},
            {var,54,'Type'},
            {var,54,'Accer'}]}]},
        {call,54,
         {remote,54,{atom,54,dict},{atom,54,to_list}},
         [{var,54,'Extends'}]}}]}]},
   {clause,55,[{var,55,'_'}],[],[{nil,55}]}]},
 {function,57,delimited_encode,1,
  [{clause,57,
    [{var,57,'Records'}],
    [],
    [{call,58,
      {remote,58,{atom,58,lists},{atom,58,map}},
      [{'fun',58,
        {clauses,
         [{clause,58,
           [{var,58,'Record'}],
           [],
           [{match,59,
             {var,59,'IoRec'},
             {call,59,{atom,59,encode},[{var,59,'Record'}]}},
            {match,60,
             {var,60,'Size'},
             {call,60,{atom,60,iolist_size},[{var,60,'IoRec'}]}},
            {cons,61,
             {call,61,
              {remote,61,{atom,61,protobuffs},{atom,61,encode_varint}},
              [{var,61,'Size'}]},
             {cons,61,{var,61,'IoRec'},{nil,61}}}]}]}},
       {var,62,'Records'}]}]}]},
 {function,64,iolist,2,
  [{clause,64,
    [{atom,64,pikachu},{var,64,'Record'}],
    [],
    [{cons,65,
      {call,65,
       {atom,65,pack},
       [{integer,65,1},
        {atom,65,required},
        {call,65,
         {atom,65,with_default},
         [{record_field,65,{var,65,'Record'},pikachu,{atom,65,abc}},
          {atom,65,none}]},
        {atom,65,string},
        {nil,65}]},
      {nil,65}}]}]},
 {function,67,with_default,2,
  [{clause,67,
    [{var,67,'Default'},{var,67,'Default'}],
    [],
    [{atom,67,undefined}]},
   {clause,68,[{var,68,'Val'},{var,68,'_'}],[],[{var,68,'Val'}]}]},
 {function,70,pack,5,
  [{clause,70,
    [{var,70,'_'},
     {atom,70,optional},
     {atom,70,undefined},
     {var,70,'_'},
     {var,70,'_'}],
    [],
    [{nil,70}]},
   {clause,72,
    [{var,72,'_'},
     {atom,72,repeated},
     {atom,72,undefined},
     {var,72,'_'},
     {var,72,'_'}],
    [],
    [{nil,72}]},
   {clause,74,
    [{var,74,'_'},
     {atom,74,repeated_packed},
     {atom,74,undefined},
     {var,74,'_'},
     {var,74,'_'}],
    [],
    [{nil,74}]},
   {clause,75,
    [{var,75,'_'},
     {atom,75,repeated_packed},
     {nil,75},
     {var,75,'_'},
     {var,75,'_'}],
    [],
    [{nil,75}]},
   {clause,77,
    [{var,77,'FNum'},
     {atom,77,required},
     {atom,77,undefined},
     {var,77,'Type'},
     {var,77,'_'}],
    [],
    [{call,78,
      {atom,78,exit},
      [{tuple,78,
        [{atom,78,error},
         {tuple,78,
          [{atom,78,required_field_is_undefined},
           {var,78,'FNum'},
           {var,78,'Type'}]}]}]}]},
   {clause,80,
    [{var,80,'_'},{atom,80,repeated},{nil,80},{var,80,'_'},{var,80,'Acc'}],
    [],
    [{call,81,
      {remote,81,{atom,81,lists},{atom,81,reverse}},
      [{var,81,'Acc'}]}]},
   {clause,83,
    [{var,83,'FNum'},
     {atom,83,repeated},
     {cons,83,{var,83,'Head'},{var,83,'Tail'}},
     {var,83,'Type'},
     {var,83,'Acc'}],
    [],
    [{call,84,
      {atom,84,pack},
      [{var,84,'FNum'},
       {atom,84,repeated},
       {var,84,'Tail'},
       {var,84,'Type'},
       {cons,84,
        {call,84,
         {atom,84,pack},
         [{var,84,'FNum'},
          {atom,84,optional},
          {var,84,'Head'},
          {var,84,'Type'},
          {nil,84}]},
        {var,84,'Acc'}}]}]},
   {clause,86,
    [{var,86,'FNum'},
     {atom,86,repeated_packed},
     {var,86,'Data'},
     {var,86,'Type'},
     {var,86,'_'}],
    [],
    [{call,87,
      {remote,87,{atom,87,protobuffs},{atom,87,encode_packed}},
      [{var,87,'FNum'},{var,87,'Data'},{var,87,'Type'}]}]},
   {clause,89,
    [{var,89,'FNum'},{var,89,'_'},{var,89,'Data'},{var,89,'_'},{var,89,'_'}],
    [[{call,89,{atom,89,is_tuple},[{var,89,'Data'}]}]],
    [{match,90,
      {cons,90,{var,90,'RecName'},{var,90,'_'}},
      {call,90,{atom,90,tuple_to_list},[{var,90,'Data'}]}},
     {call,91,
      {remote,91,{atom,91,protobuffs},{atom,91,encode}},
      [{var,91,'FNum'},
       {call,91,{atom,91,encode},[{var,91,'RecName'},{var,91,'Data'}]},
       {atom,91,bytes}]}]},
   {clause,93,
    [{var,93,'FNum'},
     {var,93,'_'},
     {var,93,'Data'},
     {var,93,'Type'},
     {var,93,'_'}],
    [[{op,93,'=:=',{var,93,'Type'},{atom,93,bool}}],
     [{op,93,'=:=',{var,93,'Type'},{atom,93,int32}}],
     [{op,93,'=:=',{var,93,'Type'},{atom,93,uint32}}],
     [{op,94,'=:=',{var,94,'Type'},{atom,94,int64}}],
     [{op,94,'=:=',{var,94,'Type'},{atom,94,uint64}}],
     [{op,94,'=:=',{var,94,'Type'},{atom,94,sint32}}],
     [{op,95,'=:=',{var,95,'Type'},{atom,95,sint64}}],
     [{op,95,'=:=',{var,95,'Type'},{atom,95,fixed32}}],
     [{op,95,'=:=',{var,95,'Type'},{atom,95,sfixed32}}],
     [{op,96,'=:=',{var,96,'Type'},{atom,96,fixed64}}],
     [{op,96,'=:=',{var,96,'Type'},{atom,96,sfixed64}}],
     [{op,96,'=:=',{var,96,'Type'},{atom,96,string}}],
     [{op,97,'=:=',{var,97,'Type'},{atom,97,bytes}}],
     [{op,97,'=:=',{var,97,'Type'},{atom,97,float}}],
     [{op,97,'=:=',{var,97,'Type'},{atom,97,double}}]],
    [{call,98,
      {remote,98,{atom,98,protobuffs},{atom,98,encode}},
      [{var,98,'FNum'},{var,98,'Data'},{var,98,'Type'}]}]},
   {clause,100,
    [{var,100,'FNum'},
     {var,100,'_'},
     {var,100,'Data'},
     {var,100,'Type'},
     {var,100,'_'}],
    [[{call,100,{atom,100,is_atom},[{var,100,'Data'}]}]],
    [{call,101,
      {remote,101,{atom,101,protobuffs},{atom,101,encode}},
      [{var,101,'FNum'},
       {call,101,{atom,101,enum_to_int},[{var,101,'Type'},{var,101,'Data'}]},
       {atom,101,enum}]}]}]},
 {function,103,enum_to_int,2,
  [{clause,103,[{atom,103,pikachu},{atom,103,value}],[],[{integer,104,1}]}]},
 {function,106,int_to_enum,2,
  [{clause,106,[{var,106,'_'},{var,106,'Val'}],[],[{var,107,'Val'}]}]},
 {function,110,decode_pikachu,1,
  [{clause,110,
    [{var,110,'Bytes'}],
    [[{call,110,{atom,110,is_binary},[{var,110,'Bytes'}]}]],
    [{call,111,{atom,111,decode},[{atom,111,pikachu},{var,111,'Bytes'}]}]}]},
 {function,113,delimited_decode_pikachu,1,
  [{clause,113,
    [{var,113,'Bytes'}],
    [],
    [{call,114,
      {atom,114,delimited_decode},
      [{atom,114,pikachu},{var,114,'Bytes'}]}]}]},
 {function,116,delimited_decode,2,
  [{clause,116,
    [{var,116,'Type'},{var,116,'Bytes'}],
    [[{call,116,{atom,116,is_binary},[{var,116,'Bytes'}]}]],
    [{call,117,
      {atom,117,delimited_decode},
      [{var,117,'Type'},{var,117,'Bytes'},{nil,117}]}]}]},
 {function,119,delimited_decode,3,
  [{clause,119,
    [{var,119,'_Type'},{bin,119,[]},{var,119,'Acc'}],
    [],
    [{tuple,120,
      [{call,120,
        {remote,120,{atom,120,lists},{atom,120,reverse}},
        [{var,120,'Acc'}]},
       {bin,120,[]}]}]},
   {clause,121,
    [{var,121,'Type'},{var,121,'Bytes'},{var,121,'Acc'}],
    [],
    [{'try',122,
      [{call,122,
        {remote,122,{atom,122,protobuffs},{atom,122,decode_varint}},
        [{var,122,'Bytes'}]}],
      [{clause,123,
        [{tuple,123,[{var,123,'Size'},{var,123,'Rest'}]}],
        [[{op,123,'<',
           {call,123,{atom,123,size},[{var,123,'Rest'}]},
           {var,123,'Size'}}]],
        [{tuple,124,
          [{call,124,
            {remote,124,{atom,124,lists},{atom,124,reverse}},
            [{var,124,'Acc'}]},
           {var,124,'Bytes'}]}]},
       {clause,125,
        [{tuple,125,[{var,125,'Size'},{var,125,'Rest'}]}],
        [],
        [{match,126,
          {bin,126,
           [{bin_element,126,
             {var,126,'MessageBytes'},
             {var,126,'Size'},
             [binary]},
            {bin_element,126,{var,126,'Rest2'},default,[binary]}]},
          {var,126,'Rest'}},
         {match,127,
          {var,127,'Message'},
          {call,127,
           {atom,127,decode},
           [{var,127,'Type'},{var,127,'MessageBytes'}]}},
         {call,128,
          {atom,128,delimited_decode},
          [{var,128,'Type'},
           {var,128,'Rest2'},
           {cons,128,{var,128,'Message'},{var,128,'Acc'}}]}]}],
      [{clause,131,
        [{tuple,131,[{var,131,'_What'},{var,131,'_Why'},{var,131,'_'}]}],
        [],
        [{tuple,132,
          [{call,132,
            {remote,132,{atom,132,lists},{atom,132,reverse}},
            [{var,132,'Acc'}]},
           {var,132,'Bytes'}]}]}],
      []}]}]},
 {function,135,decode,2,
  [{clause,135,
    [{atom,135,pikachu},{var,135,'Bytes'}],
    [[{call,135,{atom,135,is_binary},[{var,135,'Bytes'}]}]],
    [{match,136,
      {var,136,'Types'},
      {cons,136,
       {tuple,136,[{integer,136,1},{atom,136,abc},{atom,136,int32},{nil,136}]},
       {cons,136,
        {tuple,136,
         [{integer,136,2},{atom,136,def},{atom,136,double},{nil,136}]},
        {nil,136}}}},
     {match,137,{var,137,'Defaults'},{nil,137}},
     {match,138,
      {var,138,'Decoded'},
      {call,138,
       {atom,138,decode},
       [{var,138,'Bytes'},{var,138,'Types'},{var,138,'Defaults'}]}},
     {call,139,
      {atom,139,to_record},
      [{atom,139,pikachu},{var,139,'Decoded'}]}]}]},
 {function,141,decode,3,
  [{clause,141,
    [{bin,141,[]},{var,141,'Types'},{var,141,'Acc'}],
    [],
    [{call,141,
      {atom,141,reverse_repeated_fields},
      [{var,141,'Acc'},{var,141,'Types'}]}]},
   {clause,142,
    [{var,142,'Bytes'},{var,142,'Types'},{var,142,'Acc'}],
    [],
    [{match,143,
      {tuple,143,[{atom,143,ok},{var,143,'FNum'}]},
      {call,143,
       {remote,143,{atom,143,protobuffs},{atom,143,next_field_num}},
       [{var,143,'Bytes'}]}},
     {'case',144,
      {call,144,
       {remote,144,{atom,144,lists},{atom,144,keyfind}},
       [{var,144,'FNum'},{integer,144,1},{var,144,'Types'}]},
      [{clause,145,
        [{tuple,145,
          [{var,145,'FNum'},
           {var,145,'Name'},
           {var,145,'Type'},
           {var,145,'Opts'}]}],
        [],
        [{match,146,
          {tuple,146,[{var,146,'Value1'},{var,146,'Rest1'}]},
          {'case',147,
           {call,147,
            {remote,147,{atom,147,lists},{atom,147,member}},
            [{atom,147,is_record},{var,147,'Opts'}]},
           [{clause,148,
             [{atom,148,true}],
             [],
             [{match,149,
               {tuple,149,
                [{tuple,149,[{var,149,'FNum'},{var,149,'V'}]},{var,149,'R'}]},
               {call,149,
                {remote,149,{atom,149,protobuffs},{atom,149,decode}},
                [{var,149,'Bytes'},{atom,149,bytes}]}},
              {match,150,
               {var,150,'RecVal'},
               {call,150,{atom,150,decode},[{var,150,'Type'},{var,150,'V'}]}},
              {tuple,151,[{var,151,'RecVal'},{var,151,'R'}]}]},
            {clause,152,
             [{atom,152,false}],
             [],
             [{'case',153,
               {call,153,
                {remote,153,{atom,153,lists},{atom,153,member}},
                [{atom,153,repeated_packed},{var,153,'Opts'}]},
               [{clause,154,
                 [{atom,154,true}],
                 [],
                 [{match,155,
                   {tuple,155,
                    [{tuple,155,[{var,155,'FNum'},{var,155,'V'}]},
                     {var,155,'R'}]},
                   {call,155,
                    {remote,155,
                     {atom,155,protobuffs},
                     {atom,155,decode_packed}},
                    [{var,155,'Bytes'},{var,155,'Type'}]}},
                  {tuple,156,[{var,156,'V'},{var,156,'R'}]}]},
                {clause,157,
                 [{atom,157,false}],
                 [],
                 [{match,158,
                   {tuple,158,
                    [{tuple,158,[{var,158,'FNum'},{var,158,'V'}]},
                     {var,158,'R'}]},
                   {call,158,
                    {remote,158,{atom,158,protobuffs},{atom,158,decode}},
                    [{var,158,'Bytes'},{var,158,'Type'}]}},
                  {tuple,159,
                   [{call,159,
                     {atom,159,unpack_value},
                     [{var,159,'V'},{var,159,'Type'}]},
                    {var,159,'R'}]}]}]}]}]}},
         {'case',162,
          {call,162,
           {remote,162,{atom,162,lists},{atom,162,member}},
           [{atom,162,repeated},{var,162,'Opts'}]},
          [{clause,163,
            [{atom,163,true}],
            [],
            [{'case',164,
              {call,164,
               {remote,164,{atom,164,lists},{atom,164,keytake}},
               [{var,164,'FNum'},{integer,164,1},{var,164,'Acc'}]},
              [{clause,165,
                [{tuple,165,
                  [{atom,165,value},
                   {tuple,165,
                    [{var,165,'FNum'},{var,165,'Name'},{var,165,'List'}]},
                   {var,165,'Acc1'}]}],
                [],
                [{call,166,
                  {atom,166,decode},
                  [{var,166,'Rest1'},
                   {var,166,'Types'},
                   {cons,166,
                    {tuple,166,
                     [{var,166,'FNum'},
                      {var,166,'Name'},
                      {cons,166,
                       {call,166,
                        {atom,166,int_to_enum},
                        [{var,166,'Type'},{var,166,'Value1'}]},
                       {var,166,'List'}}]},
                    {var,166,'Acc1'}}]}]},
               {clause,167,
                [{atom,167,false}],
                [],
                [{call,168,
                  {atom,168,decode},
                  [{var,168,'Rest1'},
                   {var,168,'Types'},
                   {cons,168,
                    {tuple,168,
                     [{var,168,'FNum'},
                      {var,168,'Name'},
                      {cons,168,
                       {call,168,
                        {atom,168,int_to_enum},
                        [{var,168,'Type'},{var,168,'Value1'}]},
                       {nil,168}}]},
                    {var,168,'Acc'}}]}]}]}]},
           {clause,170,
            [{atom,170,false}],
            [],
            [{call,171,
              {atom,171,decode},
              [{var,171,'Rest1'},
               {var,171,'Types'},
               {cons,171,
                {tuple,171,
                 [{var,171,'FNum'},
                  {var,171,'Name'},
                  {call,171,
                   {atom,171,int_to_enum},
                   [{var,171,'Type'},{var,171,'Value1'}]}]},
                {var,171,'Acc'}}]}]}]}]},
       {clause,173,
        [{atom,173,false}],
        [],
        [{'case',174,
          {call,174,
           {remote,174,{atom,174,lists},{atom,174,keyfind}},
           [{atom,174,'$extensions'},{integer,174,2},{var,174,'Acc'}]},
          [{clause,175,
            [{tuple,175,[{var,175,'_'},{var,175,'_'},{var,175,'Dict'}]}],
            [],
            [{match,176,
              {tuple,176,
               [{tuple,176,[{var,176,'FNum'},{var,176,'_V'}]},{var,176,'R'}]},
              {call,176,
               {remote,176,{atom,176,protobuffs},{atom,176,decode}},
               [{var,176,'Bytes'},{atom,176,bytes}]}},
             {match,177,
              {var,177,'Diff'},
              {op,177,'-',
               {call,177,{atom,177,size},[{var,177,'Bytes'}]},
               {call,177,{atom,177,size},[{var,177,'R'}]}}},
             {match,178,
              {bin,178,
               [{bin_element,178,{var,178,'V'},{var,178,'Diff'},[binary]},
                {bin_element,178,{var,178,'_'},default,[binary]}]},
              {var,178,'Bytes'}},
             {match,179,
              {var,179,'NewDict'},
              {call,179,
               {remote,179,{atom,179,dict},{atom,179,store}},
               [{var,179,'FNum'},{var,179,'V'},{var,179,'Dict'}]}},
             {match,180,
              {var,180,'NewAcc'},
              {call,180,
               {remote,180,{atom,180,lists},{atom,180,keyreplace}},
               [{atom,180,'$extensions'},
                {integer,180,2},
                {var,180,'Acc'},
                {tuple,180,
                 [{atom,180,false},
                  {atom,180,'$extensions'},
                  {var,180,'NewDict'}]}]}},
             {call,181,
              {atom,181,decode},
              [{var,181,'R'},{var,181,'Types'},{var,181,'NewAcc'}]}]},
           {clause,182,
            [{var,182,'_'}],
            [],
            [{match,183,
              {tuple,183,[{atom,183,ok},{var,183,'Skipped'}]},
              {call,183,
               {remote,183,{atom,183,protobuffs},{atom,183,skip_next_field}},
               [{var,183,'Bytes'}]}},
             {call,184,
              {atom,184,decode},
              [{var,184,'Skipped'},
               {var,184,'Types'},
               {var,184,'Acc'}]}]}]}]}]}]}]},
 {function,188,reverse_repeated_fields,2,
  [{clause,188,
    [{var,188,'FieldList'},{var,188,'Types'}],
    [],
    [{lc,189,
      {block,189,
       [{'case',190,
         {call,190,
          {remote,190,{atom,190,lists},{atom,190,keyfind}},
          [{var,190,'FNum'},{integer,190,1},{var,190,'Types'}]},
         [{clause,191,
           [{tuple,191,
             [{var,191,'FNum'},
              {var,191,'Name'},
              {var,191,'_Type'},
              {var,191,'Opts'}]}],
           [],
           [{'case',192,
             {call,192,
              {remote,192,{atom,192,lists},{atom,192,member}},
              [{atom,192,repeated},{var,192,'Opts'}]},
             [{clause,193,
               [{atom,193,true}],
               [],
               [{tuple,194,
                 [{var,194,'FNum'},
                  {var,194,'Name'},
                  {call,194,
                   {remote,194,{atom,194,lists},{atom,194,reverse}},
                   [{var,194,'Value'}]}]}]},
              {clause,195,[{var,195,'_'}],[],[{var,196,'Field'}]}]}]},
          {clause,198,[{var,198,'_'}],[],[{var,198,'Field'}]}]}]},
      [{generate,200,
        {match,200,
         {tuple,200,[{var,200,'FNum'},{var,200,'Name'},{var,200,'Value'}]},
         {var,200,'Field'}},
        {var,200,'FieldList'}}]}]}]},
 {function,202,unpack_value,2,
  [{clause,202,
    [{var,202,'Binary'},{atom,202,string}],
    [[{call,202,{atom,202,is_binary},[{var,202,'Binary'}]}]],
    [{call,203,{atom,203,binary_to_list},[{var,203,'Binary'}]}]},
   {clause,204,[{var,204,'Value'},{var,204,'_'}],[],[{var,204,'Value'}]}]},
 {function,206,to_record,2,
  [{clause,206,
    [{atom,206,pikachu},{var,206,'DecodedTuples'}],
    [],
    [{match,207,
      {var,207,'Record1'},
      {call,207,
       {remote,207,{atom,207,lists},{atom,207,foldr}},
       [{'fun',208,
         {clauses,
          [{clause,208,
            [{tuple,208,[{var,208,'_FNum'},{var,208,'Name'},{var,208,'Val'}]},
             {var,208,'Record'}],
            [],
            [{call,209,
              {atom,209,set_record_field},
              [{call,209,
                {atom,209,record_info},
                [{atom,209,fields},{atom,209,pikachu}]},
               {var,209,'Record'},
               {var,209,'Name'},
               {var,209,'Val'}]}]}]}},
        {record,210,pikachu,[]},
        {var,210,'DecodedTuples'}]}},
     {call,211,{atom,211,decode_extensions},[{var,211,'Record1'}]}]}]},
 {function,213,decode_extensions,1,
  [{clause,213,
    [{match,213,
      {record,213,pikachu,
       [{record_field,213,{atom,213,'$extensions'},{var,213,'Extensions'}}]},
      {var,213,'Record'}}],
    [],
    [{match,214,{var,214,'Types'},{nil,214}},
     {match,215,
      {var,215,'NewExtensions'},
      {call,215,
       {atom,215,decode_extensions},
       [{var,215,'Types'},
        {call,215,
         {remote,215,{atom,215,dict},{atom,215,to_list}},
         [{var,215,'Extensions'}]},
        {nil,215}]}},
     {record,216,
      {var,216,'Record'},
      pikachu,
      [{record_field,216,
        {atom,216,'$extensions'},
        {var,216,'NewExtensions'}}]}]},
   {clause,217,[{var,217,'Record'}],[],[{var,218,'Record'}]}]},
 {function,220,decode_extensions,3,
  [{clause,220,
    [{var,220,'_Types'},{nil,220},{var,220,'Acc'}],
    [],
    [{call,221,
      {remote,221,{atom,221,dict},{atom,221,from_list}},
      [{var,221,'Acc'}]}]},
   {clause,222,
    [{var,222,'Types'},
     {cons,222,
      {tuple,222,[{var,222,'Fnum'},{var,222,'Bytes'}]},
      {var,222,'Tail'}},
     {var,222,'Acc'}],
    [],
    [{match,223,
      {var,223,'NewAcc'},
      {'case',223,
       {call,223,
        {remote,223,{atom,223,lists},{atom,223,keyfind}},
        [{var,223,'Fnum'},{integer,223,1},{var,223,'Types'}]},
       [{clause,224,
         [{tuple,224,
           [{var,224,'Fnum'},
            {var,224,'Name'},
            {var,224,'Type'},
            {var,224,'Opts'}]}],
         [],
         [{match,225,
           {tuple,225,[{var,225,'Value1'},{var,225,'Rest1'}]},
           {'case',226,
            {call,226,
             {remote,226,{atom,226,lists},{atom,226,member}},
             [{atom,226,is_record},{var,226,'Opts'}]},
            [{clause,227,
              [{atom,227,true}],
              [],
              [{match,228,
                {tuple,228,
                 [{tuple,228,[{var,228,'FNum'},{var,228,'V'}]},{var,228,'R'}]},
                {call,228,
                 {remote,228,{atom,228,protobuffs},{atom,228,decode}},
                 [{var,228,'Bytes'},{atom,228,bytes}]}},
               {match,229,
                {var,229,'RecVal'},
                {call,229,{atom,229,decode},[{var,229,'Type'},{var,229,'V'}]}},
               {tuple,230,[{var,230,'RecVal'},{var,230,'R'}]}]},
             {clause,231,
              [{atom,231,false}],
              [],
              [{'case',232,
                {call,232,
                 {remote,232,{atom,232,lists},{atom,232,member}},
                 [{atom,232,repeated_packed},{var,232,'Opts'}]},
                [{clause,233,
                  [{atom,233,true}],
                  [],
                  [{match,234,
                    {tuple,234,
                     [{tuple,234,[{var,234,'FNum'},{var,234,'V'}]},
                      {var,234,'R'}]},
                    {call,234,
                     {remote,234,
                      {atom,234,protobuffs},
                      {atom,234,decode_packed}},
                     [{var,234,'Bytes'},{var,234,'Type'}]}},
                   {tuple,235,[{var,235,'V'},{var,235,'R'}]}]},
                 {clause,236,
                  [{atom,236,false}],
                  [],
                  [{match,237,
                    {tuple,237,
                     [{tuple,237,[{var,237,'FNum'},{var,237,'V'}]},
                      {var,237,'R'}]},
                    {call,237,
                     {remote,237,{atom,237,protobuffs},{atom,237,decode}},
                     [{var,237,'Bytes'},{var,237,'Type'}]}},
                   {tuple,238,
                    [{call,238,
                      {atom,238,unpack_value},
                      [{var,238,'V'},{var,238,'Type'}]},
                     {var,238,'R'}]}]}]}]}]}},
          {'case',241,
           {call,241,
            {remote,241,{atom,241,lists},{atom,241,member}},
            [{atom,241,repeated},{var,241,'Opts'}]},
           [{clause,242,
             [{atom,242,true}],
             [],
             [{'case',243,
               {call,243,
                {remote,243,{atom,243,lists},{atom,243,keytake}},
                [{var,243,'FNum'},{integer,243,1},{var,243,'Acc'}]},
               [{clause,244,
                 [{tuple,244,
                   [{atom,244,value},
                    {tuple,244,
                     [{var,244,'FNum'},{var,244,'Name'},{var,244,'List'}]},
                    {var,244,'Acc1'}]}],
                 [],
                 [{call,245,
                   {atom,245,decode},
                   [{var,245,'Rest1'},
                    {var,245,'Types'},
                    {cons,245,
                     {tuple,245,
                      [{var,245,'FNum'},
                       {var,245,'Name'},
                       {call,245,
                        {remote,245,{atom,245,lists},{atom,245,reverse}},
                        [{cons,245,
                          {call,245,
                           {atom,245,int_to_enum},
                           [{var,245,'Type'},{var,245,'Value1'}]},
                          {call,245,
                           {remote,245,{atom,245,lists},{atom,245,reverse}},
                           [{var,245,'List'}]}}]}]},
                     {var,245,'Acc1'}}]}]},
                {clause,246,
                 [{atom,246,false}],
                 [],
                 [{call,247,
                   {atom,247,decode},
                   [{var,247,'Rest1'},
                    {var,247,'Types'},
                    {cons,247,
                     {tuple,247,
                      [{var,247,'FNum'},
                       {var,247,'Name'},
                       {cons,247,
                        {call,247,
                         {atom,247,int_to_enum},
                         [{var,247,'Type'},{var,247,'Value1'}]},
                        {nil,247}}]},
                     {var,247,'Acc'}}]}]}]}]},
            {clause,249,
             [{atom,249,false}],
             [],
             [{cons,250,
               {tuple,250,
                [{var,250,'Fnum'},
                 {tuple,250,
                  [{atom,250,optional},
                   {call,250,
                    {atom,250,int_to_enum},
                    [{var,250,'Type'},{var,250,'Value1'}]},
                   {var,250,'Type'},
                   {var,250,'Opts'}]}]},
               {var,250,'Acc'}}]}]}]},
        {clause,252,
         [{atom,252,false}],
         [],
         [{cons,253,
           {tuple,253,[{var,253,'Fnum'},{var,253,'Bytes'}]},
           {var,253,'Acc'}}]}]}},
     {call,255,
      {atom,255,decode_extensions},
      [{var,255,'Types'},{var,255,'Tail'},{var,255,'NewAcc'}]}]}]},
 {function,257,set_record_field,4,
  [{clause,257,
    [{var,257,'Fields'},
     {var,257,'Record'},
     {atom,257,'$extensions'},
     {var,257,'Value'}],
    [],
    [{match,258,{var,258,'Decodable'},{nil,258}},
     {match,259,
      {var,259,'NewValue'},
      {call,259,
       {atom,259,decode_extensions},
       [{call,259,{atom,259,element},[{integer,259,1},{var,259,'Record'}]},
        {var,259,'Decodable'},
        {call,259,
         {remote,259,{atom,259,dict},{atom,259,to_list}},
         [{var,259,'Value'}]}]}},
     {match,260,
      {var,260,'Index'},
      {call,260,
       {atom,260,list_index},
       [{atom,260,'$extensions'},{var,260,'Fields'}]}},
     {call,261,
      {remote,261,{atom,261,erlang},{atom,261,setelement}},
      [{op,261,'+',{var,261,'Index'},{integer,261,1}},
       {var,261,'Record'},
       {var,261,'NewValue'}]}]},
   {clause,262,
    [{var,262,'Fields'},
     {var,262,'Record'},
     {var,262,'Field'},
     {var,262,'Value'}],
    [],
    [{match,263,
      {var,263,'Index'},
      {call,263,{atom,263,list_index},[{var,263,'Field'},{var,263,'Fields'}]}},
     {call,264,
      {remote,264,{atom,264,erlang},{atom,264,setelement}},
      [{op,264,'+',{var,264,'Index'},{integer,264,1}},
       {var,264,'Record'},
       {var,264,'Value'}]}]}]},
 {function,266,list_index,2,
  [{clause,266,
    [{var,266,'Target'},{var,266,'List'}],
    [],
    [{call,266,
      {atom,266,list_index},
      [{var,266,'Target'},{var,266,'List'},{integer,266,1}]}]}]},
 {function,268,list_index,3,
  [{clause,268,
    [{var,268,'Target'},
     {cons,268,{var,268,'Target'},{var,268,'_'}},
     {var,268,'Index'}],
    [],
    [{var,268,'Index'}]},
   {clause,269,
    [{var,269,'Target'},
     {cons,269,{var,269,'_'},{var,269,'Tail'}},
     {var,269,'Index'}],
    [],
    [{call,269,
      {atom,269,list_index},
      [{var,269,'Target'},
       {var,269,'Tail'},
       {op,269,'+',{var,269,'Index'},{integer,269,1}}]}]},
   {clause,270,
    [{var,270,'_'},{nil,270},{var,270,'_'}],
    [],
    [{op,270,'-',{integer,270,1}}]}]},
 {function,272,extension_size,1,
  [{clause,272,
    [{record,272,pikachu,
      [{record_field,272,{atom,272,'$extensions'},{var,272,'Extensions'}}]}],
    [],
    [{call,273,
      {remote,273,{atom,273,dict},{atom,273,size}},
      [{var,273,'Extensions'}]}]},
   {clause,274,[{var,274,'_'}],[],[{integer,275,0}]}]},
 {function,277,has_extension,2,
  [{clause,277,
    [{record,277,pikachu,
      [{record_field,277,{atom,277,'$extensions'},{var,277,'Extensions'}}]},
     {var,277,'FieldKey'}],
    [],
    [{call,278,
      {remote,278,{atom,278,dict},{atom,278,is_key}},
      [{var,278,'FieldKey'},{var,278,'Extensions'}]}]},
   {clause,279,
    [{var,279,'_Record'},{var,279,'_FieldName'}],
    [],
    [{atom,280,false}]}]},
 {function,282,get_extension,2,
  [{clause,282,
    [{var,282,'Record'},{atom,282,fieldatom}],
    [[{call,282,
       {atom,282,is_record},
       [{var,282,'Record'},{atom,282,pikachu}]}]],
    [{call,283,
      {atom,283,get_extension},
      [{var,283,'Record'},{integer,283,1}]}]},
   {clause,284,
    [{record,284,pikachu,
      [{record_field,284,{atom,284,'$extensions'},{var,284,'Extensions'}}]},
     {var,284,'Int'}],
    [[{call,284,{atom,284,is_integer},[{var,284,'Int'}]}]],
    [{'case',285,
      {call,285,
       {remote,285,{atom,285,dict},{atom,285,find}},
       [{var,285,'Int'},{var,285,'Extensions'}]},
      [{clause,286,
        [{tuple,286,
          [{atom,286,ok},
           {tuple,286,
            [{var,286,'_Rule'},
             {var,286,'Value'},
             {var,286,'_Type'},
             {var,286,'_Opts'}]}]}],
        [],
        [{tuple,287,[{atom,287,ok},{var,287,'Value'}]}]},
       {clause,288,
        [{tuple,288,[{atom,288,ok},{var,288,'Binary'}]}],
        [],
        [{tuple,289,[{atom,289,raw},{var,289,'Binary'}]}]},
       {clause,290,[{atom,290,error}],[],[{atom,291,undefined}]}]}]},
   {clause,293,
    [{var,293,'_Record'},{var,293,'_FieldName'}],
    [],
    [{atom,294,undefined}]}]},
 {function,296,set_extension,3,
  [{clause,296,
    [{match,296,
      {record,296,pikachu,
       [{record_field,296,{atom,296,'$extensions'},{var,296,'Extensions'}}]},
      {var,296,'Record'}},
     {atom,296,fieldname},
     {var,296,'Value'}],
    [],
    [{match,297,
      {var,297,'NewExtends'},
      {call,297,
       {remote,297,{atom,297,dict},{atom,297,store}},
       [{integer,297,1},
        {tuple,297,
         [{atom,297,rule},{var,297,'Value'},{atom,297,type},{nil,297}]},
        {var,297,'Extensions'}]}},
     {tuple,298,
      [{atom,298,ok},
       {record,298,
        {var,298,'Record'},
        pikachu,
        [{record_field,298,
          {atom,298,'$extensions'},
          {var,298,'NewExtends'}}]}]}]},
   {clause,299,
    [{var,299,'Record'},{var,299,'_'},{var,299,'_'}],
    [],
    [{tuple,300,[{atom,300,error},{var,300,'Record'}]}]}]},
 {eof,301}].
